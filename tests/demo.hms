
# This project was developed for Smarthome
# https://github.com/smarthome-go/smarthome

# All built-ins are provided by Smarthome, allowing interaction between Homescript and Smarthome
# Changes power for said outlet, on / off are aliases for true / false
switch('switch3', true)

# There are some built-in variables which are also provided by Smarthome during runtime:
# Simple concatenation in print is supported

print("The current temperature is ", temperature, " degrees.")
print(weather)
print(currentHour)
print(user)

# `If` is an expression and can therefore be used inline
switch(if temperature > 10 { 'switch1' } else { 'switch2' }, off)

# Changes power for said outlet, on / off are aliases for true / false

# All builtins are later provided via callback
switch('switch', on)

if switchOn('s3')  {
    print("switch is on: s2")
} else {
    print("switch is off: s2")
}

## Sleep takes the amount of seconds to sleep
sleep(1)

## Print prints to a specified callback (console + output of hms)
print('message')

# Sends a notification to the current user, last parameter is the level (1..3)
notify('title', 'description', 1)

print(num('1'))
print(num('-1'))
print(num('+1'))
print(num('0.1'))

# Will thrown an error
# print(num('NaN'))
# `switchOn` can be used to query the power state of a given switch
if switchOn('switch3')  {
    print("switch is on.")
} else {
    print("switch is off.")
}

# `sleep` pauses the execution of the current script for the given amount of seconds
sleep(1)

# `notify` sends a notification to the current user, last parameter is the level (1..3)
notify('title', 'description', 1)

# `addUser` creates a new user
addUser('username', 'password', 'forename', 'surname')

# Make network requests using Homescript
print(get('http://localhost:8082'))
print(http('http://localhost:8082', 'POST', '{id": 1}', pair('Content-Type', 'application/json')))

# The `checkArg` function can be used to validate that an expected argument was passed as a value
# It is recommended to use this function before attempting to use `getArg('x')`
if checkArg('identifer') {
    print(checkArg('identifer'))
    print(getArg('identifier'))
}

# Exec can be used to trigger the execution of another Homescript
exec('homescript_id')

# If a Homescript should be called using arguments, they can be included as optional args
# the exec function will use arguments after the first argument as call-args for the Homescript to be executed
# When using call args, please avoid duplicate key entries, otherwise, the function will return an error
exec('homescript_id', pair('key', 'value'))

# The pair function can be used to create a generic value pair (here used as call-arguments for the exec function)
# The reason for this function's usage is to create a visual and semantic separator between each call argument
print(pair('key', 'value'))

# The `getArg` function attempts to return the value of a given argument identifier
# If the argument does not exist, an error is returned
# Due to this, it is best practice to use `checkArg('x')` before using `getArg`
print(getArg('ok'))

# Exit terminates execution
panic("This is a panic, it was caused intentionally.")
exit(0)

print("Unreachable code.")
