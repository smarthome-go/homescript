import templ FooFeature from templates;

@Singleton
type Foo = {
    foo: int,
};

@Singleton2
type Bar = {
    bar: str,
    is_online: bool,
};

// TODO: change singleton syntax
$Driver = {
    bar: str,
    is_online: bool,
    @setting is_online: bool, // TODO: add field annotations to types
};

impl FooFeature with { light } for @Singleton {
    //fn New(s: @Singleton) {
    //    s.foo = 42;
    //}

    //fn bar(self: @Singleton, bar: @Singleton2, value: int) -> int {
        //42
    //}

    fn dim(self: @Singleton, percent: int) -> bool {
        self
    }
}

    // TODO: there are currently no limitations regarding *what* belongs in an impl block.
//impl @Singleton {
    //fn do_something(s: @Singleton) {
        //println(s);
    //}
//}

// TODO: remove this
impl Bar {

}

fn main() {
    // Automatically captures the singleton as there is only one instance.
    //do_something();

    dim(42);
}
