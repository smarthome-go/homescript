import assert_eq from testing;

// Function which takes a list and returns a new list with another (appended) item
fn append(list: [int], item: int) -> [int] {
    list.push(item);
    return list;
}

fn main() {
    let list = [1, 2, 3, 4];
    list.push(5);

    // This should be true
    assert_eq(list, [1, 2, 3, 4, 5]);

    // This results in a type error
    // list.push(false);

    for i in list.len().to_range() {
        println(list[i]);
    }

    // This results in a type error
    // println(list == []);
    // This as well
    // println(list == ["foo", "bar", "baz"]);

    // Pushing list elements
    let list_1: [int] = [];
    list_1.push(1);
    assert_eq(list_1.len(), 1);

    // Popping list elements
    println("list.pop");
    let list_2 = [1, 2, 3, 4, 5, 6];
    for _ in list_2.len().to_range() {
        // Pop returns the element popped
        list_2.pop();
        println(list_2);
    }

    // Pushing elements to the front
    println("list.push_front");
    let list_3: [int] = [];
    for i in 0..10 {
        // Adds an element to the front
        list_3.push_front(i);
        println(list_3);
    }

    // Popping elements from the front
    println("list.pop_front");
    for _ in list_3.len().to_range() {
        // Removes the first element of the list
        list_3.pop_front();
        println(list_3);
    }

    // Insert at specific location
    println("list.insert");
    let list_4 = [1, 2, 3, 4];
    println(list_4);
    list_4.insert(3, 9);
    println(list_4);

    // Remove specific index
    println("list.remove");
    let list_5 = [1, 2, 3, 4];
    println(list_5);
    list_5.remove(-1);
    println(list_5);

    // Index test
    println("index test");
    let list_6 = [0, 1, 2, 3, 4];
    println("last element:", list_6[-1]);

    // Concat test
    println("concat test");
    let list_7 = [1, 2];
    println(list_7);
    list_7.concat([3, 4, 5]);
    println(list_7);


    let new1 = append([1, 2], 3)[-1];
    println(new1);

    // All list builtins listed below
    let demo: [int] = [];

    demo.len();

    demo.push(1);
    demo.pop();

    demo.push_front(0);
    demo.pop_front();

    demo.concat([2, 3, 4]);
    demo.join("-");
    "a b c".split(" ");

    demo.insert(1, 42);
    demo.remove(1);

    let iter = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    let output = "";

    for element in iter {
        output += element.to_string();
    }

    assert_eq(output, '0123456789');
}
