# Datatypes
print(weather);             # Object (builtin only)
print("string");            # String
print(42);                  # Number
print(3.14159265);          # Number (supports floats)
print(true);                # Booleans
print(false);               # Booleans
print("key" => "value");    # Pairs (1 dimensional hash-maps)
print(print);               # Functions

# The `let` keyword can be used for variable declaration
let string_value = "any string";
string_value = 1 as str;    # Once a variable is bound to a value, it must not change its type
# string_value = 1;         # Illegal assignment
let object_value = weather;

# on / off are synonyms for true / false
let boolean_value = true;
boolean_value = on;
boolean_value = off;

let number_value = 42;
number_value = 3.14159265;  # Homescript supports re-assignment
number_value +=  1;         # Plus assignment
number_value -=  2;         # Minus assignment
number_value *=  3;         # Multiply assignment
number_value /=  4;         # Divide assignment
number_value %=  5;         # Reminder assignment
number_value **= 6;         # Power assignment
print("after", number_value);

# The exec function calls another Homescript
let exec_result = exec(
    "test_script",          # The target HMS ID
    "key" => 42,            # Arguments to the HMS are in pair-form
    #...                    # Many more arguments (or even none) are legal
);
print(                      # The result is an object
    exec_result.output,     # The print-output of the script
    exec_result.elapsed,    # The elapsed runtime (in seconds)
    exec_result.value       # The scripts return value (value of last statement)
);

# String concatenation using different types is allowed
# Every variable wich can be printed can be used in concatenation
print(
    "Pi is roughly " + "a value of " + 3.14159265 + " right?"
);
# However, operations involving completely different types are illegal
#print(1 + false);

# Error handling
try {
    throw("error");         # Throw- and Runtime errors can be caught
} catch err {
    print(err);
};

try {
    # This is a type error and can therefore not be caught
    # 1 + false;
} catch err {
    print(err);
};

# Homescript supports anonymous functions
let a = fn () {
    print("Anonymous function");
};
a();

# Program control flow
if true == false {
    throw("This should be unreachable");
} else if 1 > 0 {
    print("Else if works like this");
} else {
    print("Final else block");
};

# Loops
for any_identifier in 0..10  {
    print(any_identifier);
};

let while_counter = 0;
while while_counter < 10 {
    while_counter += 1;
};

let loop_counter = 0;
let last_loop_counter = loop {
    if loop_counter > 10 {
        break loop_counter;
    };
    loop_counter += 1;
};
print("Last loop counter:", last_loop_counter);

# Homescript supports a very basic module system
# Functions can be imported from another script
# import foo [ as bar ] from baz;

# Imports the fin(n) function
import fib from fibonacci;

# Calculate some fibonacci numbers
let last_number = "This is the last number: " + for n in 2..22 {
    print("fib(" + n + ") = " + fib(n));
    n;
};

print(last_number);
