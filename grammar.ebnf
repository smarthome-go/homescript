Expressions = { eol } , [ Expression, { eol , { eol } , Expression } ] , { eol } ;

(* Expressions *)
Expression  = AndExpr , { '||' , AndExpr } ;
AndExpr     = EqExpr , { '&&' , EqExpr } ;
EqExpr      = RelExpr , [ ( '==' | '!=' ) , RelExpr ] ;
RelExpr     = NotExpr , [ ( '<' | '<=' | '>' | '>=' ) , NotExpr ] ;
NotExpr     = [ '!' ] , Atom ;
Atom        = number
            | string
            | bool
            | identifier
            | IfExpr
            | CallExpr
            | '(' , Expression , ')' ;
IfExpr      = 'if' , Expression , '{' , Expressions , '}' , [ 'else' , '{' , Expressions , '}' ] ;
CallExpr    = identifier , '(', { eol } , [ Expression , { ',' , { eol } , Expression } , [ ',' ] ] , { eol } , ')' ;

(* Tokens *)
eol         = ? line break ? | ';' ;
number      = DIGIT , { DIGIT } , [ '.' , DIGIT , { DIGIT } ] ;
string      = '"' , { CHAR - '"' - '\' | escape_seq } , '"'
            | "'" , { CHAR - "'" - '\' | escape_seq } , "'" ;
escape_seq  = '\' , ( ESCAPE_CHAR
                    | OCTAL , OCTAL , OCTAL
                    | 'x' , HEX , HEX
                    | 'u' , HEX , HEX , HEX , HEX
                    | 'U' , HEX , HEX , HEX , HEX , HEX , HEX , HEX , HEX ) ;
bool        = 'true' | 'false' | 'on' | 'off' ;
identifier  = LETTER , { LETTER } ;

(* Character lists *)
LETTER      = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J'
            | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T'
            | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | 'a' | 'b' | 'c' | 'd'
            | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n'
            | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x'
            | 'y' | 'z' ;
DIGIT       = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' ;
OCTAL       = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' ;
HEX         = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
            | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'a' | 'b' | 'c' | 'd'
            | 'e' | 'f' ;
CHAR        = ? any UTF8 character ? ;
ESCAPE_CHAR = '\' | "'" | '"' | 'b' | 'n' | 'r' | 't' ;
